dev.cur()
dev.list()
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
p_unload(all)  # Remove all contributed packages
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
p_base()
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(datasets, pacman, rio, tidyverse)
p_unload(all)  # Remove all contributed packages
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(datasets, pacman, rio, tidyverse)
p_loaded()
p_unload(all)  # Remove all contributed packages
hist(iris)
hist(iris$Sepal.Length)
dev.cur()
dev.list()
if (!dev.list(NULL)) dev.off()
if (!dev.list("NULL")) dev.off()
dev.off()  # But only if there IS a plot
dev.list()
dev.cur()
# Clear plots
hist(iris$Sepal.Length)
if (dev.list()>1) dev.off()
dev.list()
dev.cur()
if (dev.list()>1) dev.off()
# Clear plots
hist(iris$Sepal.Length)
graphics.off()
dev.list()
dev.cur()
# Clear plots
hist(iris$Sepal.Length)
dev.list()
dev.cur()
dev.off()  # But only if there IS a plot
graphics.off()
?graphics.off
# Clear plots
hist(iris$Sepal.Length)
graphics.off()
dev.list()
dev.cur()
graphics.off()
# Clear plots
hist(iris$Sepal.Length)
graphics.off()
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(datasets, pacman, rio, tidyverse)
# Clear packages
detach("package:datasets", unload = T)  # For base packages
p_unload(all)  # Remove all contributed packages
install.packages(c("backports", "car", "carData", "classInt", "data.table", "digest", "DT", "emmeans", "gdtools", "ggfortify", "ggvis", "haven", "hexbin", "Hmisc", "hms", "htmltools", "htmlwidgets", "jmv", "jmvcore", "KernSmooth", "knitr", "later", "leaflet", "lintr", "maptools", "mgcv", "nlme", "openxlsx", "plotly", "prodlim", "promises", "purrr", "quantreg", "qvcalc", "R.oo", "R6", "Rcpp", "RcppEigen", "rgdal", "rlang", "rmarkdown", "rvest", "scales", "shiny", "sp", "stringdist", "strucchange", "styler", "survival", "testthat", "tinytex", "units", "xfun"))
install.packages("scales")
install.packages(c("deSolve", "selectr"))
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(datasets, pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
# rename(y = psychRegions) %>%
print()
